#!/usr/bin/env node

const util = require('util');
const fs = require('fs');
const path = require('path');



const pathToFiles = process.cwd();


const readDir = (pathToFile) =>  fs.readdirSync(pathToFile);
const writeFile = util.promisify(fs.writeFile);
const isDirectory = (inputPath, str) => fs.statSync(path.join(inputPath, str)).isDirectory();


const scssRegex = /^_.*scss$/gm;
let mainFolder;
let scssFiles = [];

searchForMainFolder(pathToFiles);
scanForScssFiles(mainFolder);



const data = createTextInput(scssFiles);

writeMainScss(mainFolder, data);

function searchForMainFolder(input) {
    const folder = readDir(input);
    if (folder.includes('main.scss')) {
        mainFolder = input;
        return;
    } else {
        let foldersNames = folder.filter((str) => isDirectory(input, str))
        for (let i = 0; i < foldersNames.length; i++) {
            const newPath = path.join(input, foldersNames[i]);
            searchForMainFolder(newPath);
        }
    }
};
function pushToScssFiles(inputFolder, inputPath){
    inputFolder.forEach(val => {
        if(val.match(scssRegex)) {
            const newPath = path.join(inputPath, val);
            scssFiles.push(newPath);
        }
    })
};

function scanForScssFiles(inputPath) {
    const folder = readDir(inputPath);
    pushToScssFiles(folder, inputPath);
    let foldersNames = folder.filter((str) => isDirectory(inputPath, str))
    if(foldersNames.length === 0) {
        return;
    } else {
        for (let i = 0; i < foldersNames.length; i++) {
            const newPath = path.join(inputPath, foldersNames[i]);
            scanForScssFiles(newPath);
        }
    }

}


function writeMainScss(inputPath, data) {
    const newPath = path.join(inputPath, 'main.scss');
    writeFile(newPath, data, 'utf-8').then(()=> console.log('Imports updated')).catch(err => console.log(err));
};


function createTextInput(arr) {
    const regex = /_|.scss$/gm;
    const paths = arr.map(str => {
 
        let newStr = str.slice(mainFolder.length);
        newStr = newStr.replace(regex, '');
        return newStr
    });

    let data = `// File generated by auto-import-scss
    `;

    for(let i = 0; i < paths.length; i++) {
        data += `
@import "${paths[i]}";`;
    }

    return data;
}



